set nocompatible

"========================plugin install=============================
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"Plugin 'gmarik/Vundle.vim'
Plugin 'VundleVim/Vundle.vim'

Plugin 'valloric/ListToggle'
Plugin 't9md/vim-quickhl'
Plugin 'bling/vim-airline'

"..................................
" vim-scripts repos

"Plugin 'YankRing.vim'
"Plugin 'ShowPairs'
"Plugin 'SudoEdit.vim'
"Plugin 'EasyGrep'
"Plugin 'VOoM'
"Plugin 'VimIM'


""..................................
""non github repos
""Plugin 'git://git.wincent.com/command-t.git'
"".....................................

""""""""" edit history, 可以查看回到某个历史状态""""""""""""
Plugin 'sjl/gundo.vim'
noremap <leader>h :GundoToggle<CR>

""""""""""""""""python-mode"""""""""""""""""""""""
Plugin 'klen/python-mode'
let g:pymode_python = 'python3'


""""""""""""tagbar"""""""""""""""""
Plugin 'majutsushi/tagbar'
set tags+=~/.vim/systags;
let tagbar_left=1
nnoremap <leader>tb :TagbarToggle<CR>
let g:tagbar_compact=1
let tagbar_width=32
let g:tagbar_type_cpp = {
            \ 'ctagstype' : 'c++',
            \ 'kinds'     : [
            \ 'd:macros:1',
            \ 'g:enums',
            \ 't:typedefs:0:0',
            \ 'e:enumerators:0:0',
            \ 'n:namespaces',
            \ 'c:classes',
            \ 's:structs',
            \ 'u:unions',
            \ 'f:functions',
            \ 'm:members:0:0',
            \ 'v:global:0:0',
            \ 'x:external:0:0',
            \ 'l:local:0:0'
            \ ],
            \ 'sro'        : '::',
            \ 'kind2scope' : {
            \ 'g' : 'enum',
            \ 'n' : 'namespace',
            \ 'c' : 'class',
            \ 's' : 'struct',
            \ 'u' : 'union'
            \ },
            \ 'scope2kind' : {
            \ 'enum'      : 'g',
            \ 'namespace' : 'n',
            \ 'class'     : 'c',
            \ 'struct'    : 's',
            \ 'union'     : 'u'
            \ }
        \ }

"""""""""a.vim"""""""""""""""""""""
Plugin 'a.vim'
 "用于切换C/C++头文件
 ":A     ---切换头文件并独占整个窗口
 ":AV    ---切换头文件并垂直分割窗口
 ":AS    ---切换头文件并水平分割窗口"

"""""""""syntastic""""""""""""""""""
Plugin 'scrooloose/syntastic'
"let g:syntastic_check_on_open = 1
"let g:syntastic_cpp_include_dirs = ['/usr/include/']
"let g:syntastic_cpp_remove_include_errors = 1
"let g:syntastic_cpp_check_header = 1
"let g:syntastic_cpp_compiler = 'clang++'
"let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
"set error or warning signs
"let g:syntastic_error_symbol = '>>'
"let g:syntastic_warning_symbol = '>'
"whether to show balloons
"let g:syntastic_enable_balloons = 1

" 最轻量
" let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes

" 中等
" error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint快
let g:syntastic_python_pep8_args='--ignore=E501,E225'

" 重量级, 但是足够强大, 定制完成后相当个性化
" pylint codes: http://pylint-messages.wikidot.com/all-codes
" let g:syntastic_python_checkers=['pyflakes', 'pylint'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_checkers=['pylint'] " 使用pyflakes,速度比pylint快
" let g:syntastic_python_pylint_args='--disable=C0111,R0903,C0301'

""""""""""""YCM""""""""""""""""""""
Plugin 'Valloric/YouCompleteMe'
"Plugin 'rdnetto/YCM-Generator'

let g:ycm_error_symbol='>>'
let g:ycm_warning_symbol='>*'
let g:ycm_server_use_vim_stdout=1
let g:ycm_server_log_level='debug'
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
"let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
let g:ycm_confirm_extra_conf=0
let g:ycm_cache_omnifunc=0
"let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_filetype_blacklist = {'text' : 1, 'gitcommit' : 1,'tagbar' : 1,}
let g:ycm_autoclose_preview_window_after_completion=1
"修改c func默认补全键 ctrl + space 为 alt + ;
"let g:ycm_key_invoke_completion = '<M-;>'
" 跳转到定义处, 分屏打开
let g:ycm_goto_buffer_command = 'horizontal-split'
nnoremap <leader>jc : YcmCompleter GoToDeclaration<CR>
nnoremap <leader>jf : YcmCompleter GoToDefinition<CR>
nnoremap <leader>jj : YcmCompleter GoToDefinitionElseDeclaration<CR>

""""""""""""""""NERD-tree""""""""""""""""
Plugin 'scrooloose/nerdtree'
nmap <leader>nt : NERDTree<CR>
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\.$','\~$','\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$' ]
let NERDTreeShowLineNumbers=1
let NERDTreeWinPos=1
let NERDTreeMinimalUI=1

""""""""""""""""nerdcommenter""""""""""""""""
Plugin 'scrooloose/nerdcommenter'
let NERDShutUp=1
map <c-h> ,c<space>

""""""""""""""""""ctrlp""""""""""""""""""""""
Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlPMRU'
"let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
"set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux

" ctrlp插件1 - 不用ctag进行函数快速跳转
Plugin 'tacahiroy/ctrlp-funky'
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1

let g:ctrlp_extensions = ['funky']

" 类似sublimetext的搜索
"Plugin "dyng/ctrlsf.vim"
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
nmap \ <Plug>CtrlSFCwordPath<CR>
" let g:ctrlsf_position = 'below'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
" Note: cannot use <CR> or <C-m> for open
" Use : <sapce> or <tab>
let g:ctrlsf_mapping = {
    \ "open"  : "<Space>",
    \ "openb" : "O",
    \ "tab"   : "t",
    \ "tabb"  : "T",
    \ "prevw" : "p",
    \ "quit"  : "q",
    \ "next"  : "<C-J>",
    \ "prev"  : "<C-K>",
    \ "pquit" : "q",
    \ }


""""""""""""""""""""ultisnips"""""""""""""""""""""""
"Plugin 'SirVer/ultisnips'
"Plugin 'honza/vim-snippets'
"let g:UltiSnipsExpandTrigger = "<tab>"
"let g:UltiSnipsJumpForwardTrigger = "<tab>"
"let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
"let g:UltiSnipsDirectories=["snippets", "bundle/ultisnips/UltiSnips"]
"let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
"" 参考https://github.com/Valloric/YouCompleteMe/issues/36#issuecomment-62941322
"" " 解决ultisnips和ycm tab冲突，如果不使用下面的办法解决可以参考
"" "
"" https://github.com/Valloric/YouCompleteMe/issues/36#issuecomment-63205056的配置
"" " begin
"let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']
"" " end

"""""""" 自动补全单引号，双引号等 """""""""""""""""
Plugin 'Raimondi/delimitMate'


" ################### 快速移动 ###################
"更高效的移动 [,, + w/fx]
"Plugin 'Lokaltog/vim-easymotion'
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
"map <Leader><leader>h <Plug>(easymotion-linebackward)
"map <Leader><Leader>j <Plug>(easymotion-j)
"map <Leader><Leader>k <Plug>(easymotion-k)
"map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
"map <Leader><leader>. <Plug>(easymotion-repeat)

"""""""""""""""""""""""ListToggle"""""""""""""""""""""""""""""
let g:lt_location_list_toggle_map = '<leader>l'
let g:lt_quickfix_list_toggle_map = '<leader>q'

""""""""""""""" 快速去行尾空格 [, + <Space>] """"""""""""""""""""
Plugin 'bronson/vim-trailing-whitespace'
map <leader><space> :FixWhitespace<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""
call vundle#end()

""======================================================
filetype plugin indent on

